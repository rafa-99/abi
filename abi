#!/bin/sh

OS=$(grep -i ^id= /etc/os-release | cut -d= -f2)

#############################

echo
echo "################################"
echo "# Checking Internet Connection #"
echo "################################"
echo
echo
sleep 2

if ! ping -q -c 4 archlinux.org >/dev/null;then
	echo "YOU MUST HAVE INTERNET CONNECTION TO RUN THIS SCRIPT" && exit
fi


case "$OS" in
	"artix")
		pacman-key --init
		pacman-key --populate artix
esac
clear

#############################

echo
echo "######################"
echo "# Set Your Variables #"
echo "######################"
echo
echo
sleep 2

# Reading Variables
## Reading Keyboard Layout
printf "What is your Keyboard Layout (e.g. us)\n-> " && read -r KEYMAP && loadkeys "$KEYMAP" || exit
clear

## Reading Locale
printf "Select your locale (e.g. en_US)\n-> " && read -r LOCALE
clear

## Reading Desired Username
printf "Select your Username (Use only lowercase letters and numbers)\n-> " && read -r USERNAME
clear

## Reading Desired Hostname
printf "Select your Hostname (You can use Uppercase and lowercase letters, numbers and hypens)\n-> " && read -r HOSTNAME
clear

## Reading Desired Timezone
printf "Select the Timezone that better suits you...\nPress ENTER to continue and then press \"Q\" to exit" && read -r TIMEZONE
find /usr/share/zoneinfo -type d | grep -vi zoneinfo$ | grep -vi etc | xargs -I {} find {} -type f | sed s:"/usr/share/zoneinfo/"::g | less -i
printf "Which Timezone? (eg America/New_York)\n-> " && read -r TIMEZONE
clear

## Reading Kernel
printf "Select your kernel:\n1)linux\n2)linux-hardened\n3)linux-lts [Recommended](Default)\n4)linux-zen\n-> " && read -r KERNEL
case "$KERNEL" in
	1)
		KERNEL="linux"
		;;
	2)
		KERNEL="linux-hardened"
		;;
	4)
		KERNEL="linux-zen"
		;;
	*)
		KERNEL="linux-lts"
esac
clear

## Reading Init System
case "$OS" in
	"artix")
		printf "Select your init system:\n1) dinit\n2) OpenRC (default)\n3) Runit\n4) S6\n-> " && read -r INIT
		case "$INIT" in
			1)
				INIT="dinit"
				;;
			3)
				INIT="runit"
				;;
			4)
				INIT="s6"
				;;
			*)
				INIT="openrc"
		esac
		;;

	*)
		INIT="systemd"
esac

#############################

echo
echo "#####################"
echo "# Disk Partitioning #"
echo "#####################"
echo
echo
sleep 2

#Partitioning HDD
## Reading Main Drive
lsblk
printf "What is your drive (e.g. sda)\n-> " && read -r SDX
clear

## Partitionier
cfdisk /dev/"$SDX"
clear

## Disk Encryption
lsblk
printf "Do you wish to use any encrypted parition? [Y/n]" && read -r ENCRYPTED
if [ "$ENCRYPTED" != "N" ] && [ "$ENCRYPTED" != "n" ]; then
	pacman --noconfirm --needed -Sy cryptsetup
	clear
fi
clear

## Mounting Partitions
echo "Mount your partitions to /mnt and wipe them if necessary"
echo "After partitioning, type \"exit\" to go back to the script"
echo ""
echo ""
lsblk
echo ""
bash
clear

#############################

echo
echo "#######################"
echo "# Bootstraping System #"
echo "#######################"
echo
echo
sleep 2

# Sorting Servers
echo "Downloading rankmirror script for pacman"
pacman -Sy --noconfirm --needed pacman-contrib
clear

echo "Updating Repos..."
mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
grep -vi ^# /etc/pacman.d/mirrorlist.backup | rankmirrors - > /etc/pacman.d/mirrorlist
clear

# Bootstrapping Filesystem
echo "Bootstrapping Filesystem"

if [ "$OS" = "artix" ]; then
	case "$INIT" in
		"dinit")
			basestrap /mnt base base-devel dinit elogind-dinit "$KERNEL"
			;;
		"runit")
			basestrap /mnt base base-devel runit elogind-runit "$KERNEL"
			;;
		"s6")
			basestrap /mnt base base-devel s6-base elogind-s6 "$KERNEL"
			;;
		*)
			basestrap /mnt base base-devel openrc elogind-openrc "$KERNEL"
	esac
	fstabgen -U /mnt >> /mnt/etc/fstab
else
	pacstrap /mnt base "$KERNEL"
	genfstab -U /mnt >> /mnt/etc/fstab
fi
clear

#############################

echo
echo "######################"
echo "# Configuring System #"
echo "######################"
echo
echo
sleep 2

if [ "$OS" = "artix" ]; then
	CHROOTC="artix-chroot /mnt /bin/bash -c"
	CHROOT="artix-chroot /mnt /bin/bash"
else
	CHROOTC="arch-chroot /mnt /bin/bash -c"
	CHROOT="arch-chroot /mnt /bin/bash"
fi


# Enabling Sudo For :wheel Group
$CHROOTC "sed -i s/'# %wheel ALL=(ALL:ALL) ALL'/'%wheel ALL=(ALL:ALL) ALL'/g /etc/sudoers"

## Managing Localtime and Timezone
rm -rf /mnt/etc/localtime
$CHROOTC "ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime"

## Managing Users and Passwords
$CHROOTC "useradd -m -G wheel $USERNAME"
echo "Enter a password for $USERNAME"
$CHROOTC -c "passwd $USERNAME"
clear

echo "Enter a new password for root account"
$CHROOTC -c "passwd root"
clear

if [ "$INIT" = "openrc" ]; then
	$CHROOTC "echo hostname=\"$HOSTNAME\" > /etc/conf.d/hostname"
	sed -i s:'keymap="us"':keymap="$KEYMAP":g /mnt/etc/conf.d/keymaps

else

	 $CHROOTC "echo $HOSTNAME > /etc/hostname"
	 $CHROOTC "echo KEYMAP=$KEYMAP > /etc/vconsole.conf"
fi

$CHROOTC "echo LANG=$LOCALE.UTF-8 > /etc/locale.conf"
$CHROOTC "awk 'FNR>23' /etc/locale.gen | grep $LOCALE | sed s:#::g >> /etc/locale.gen"
$CHROOTC "locale-gen"
clear

## Adding Encrypted Hook to Init Cpio
if [ "$ENCRYPTED" != "N" ] && [ "$ENCRYPTED" != "n" ]; then
	 $CHROOTC "pacman --noconfirm --needed -Sy cryptsetup"
	 HOOKS=$(grep ^HOOKS /mnt/etc/mkinitcpio.conf)
	 grep ^HOOKS /mnt/etc/mkinitcpio.conf | sed s:'block':'block encrypt':g | xargs -I {} sed -i s:"$HOOKS":{}:g /mnt/etc/mkinitcpio.conf
fi

## Generating Initramfs
$CHROOTC "mkinitcpio -p $KERNEL"
clear

#############################

echo
echo "#################"
echo "# Base Packages #"
echo "#################"
echo
echo
sleep 2

# Installation of Extra Base
printf "Do you want to install Extra Base Packages? [Y/n]" && read -r EXTRA
if [ "$EXTRA" != "N" ] && [ "$EXTRA" != "n" ]; then

	# Text Editor Setup
	printf "Select a Text Editor:\n1) emacs\n2) nano\n3) neovim\n4) vi\n5) vim\n-> " && read -r TEXT
	case "$TEXT" in
		1)
			$CHROOTC "pacman --needed -S emacs"
			;;
		2)
			$CHROOTC "pacman --needed -S nano"
			;;
		3)
			$CHROOTC "pacman --needed -S neovim"
			;;
		4)
			$CHROOTC "pacman --needed -S vi"
			;;
		5)
			$CHROOTC "pacman --needed -S vim"
	esac
	clear

	# WiFi and Ethernet Setup
	printf "Do you wish to use WiFi? [Y/n]" && read -r WIFI
	clear
	if [ "$WIFI" != "N" ] && [ "$WIFI" != "n" ]; then
		printf "Select a Network Manager:\n1) connman\n2) network manager\n-> " && read -r NM
		case "$NM" in
			1)
				$CHROOTC "pacman --noconfirm --needed -S connman wpa_supplicant"
				case "$INIT" in
					"dinit")
						$CHROOTC "pacman --noconfirm --needed -S connman-dinit && ln -s /etc/dinit.d/connmand /etc/dinit.d/boot.d/"
						;;
					"openrc")
						$CHROOTC "pacman --noconfirm --needed -S connman-openrc && rc-update add connmand default"
						;;
					"runit")
						$CHROOTC "pacman --noconfirm --needed -S connman-runit && ln -s /etc/runit/sv/connmand /etc/runit/runsvdir/default"
						;;
					"s6")
						$CHROOTC "pacman --noconfirm --needed -S connman-s6 && touch /etc/s6/adminsv/default/contents.d/connmand && s6-db-reload"
						;;
					*)
						$CHROOTC "systemctl enable connmand"
				esac
				;;
			2)
				$CHROOTC "pacman --noconfirm --needed -S networkmanager"
				case "$INIT" in
					"dinit")
						$CHROOTC "pacman --noconfirm --needed -S networkmanager-dinit && ln -s /etc/dinit.d/NetworkManager /etc/dinit.d/boot.d/"
						;;
					"openrc")
						$CHROOTC "pacman --noconfirm --needed -S networkmanager-openrc && rc-update add NetworkManager default"
						;;
					"runit")
						$CHROOTC "pacman --noconfirm --needed -S networkmanager-runit && ln -s /etc/runit/sv/NetworkManager /etc/runit/runsvdir/default"
						;;
					"s6")
						$CHROOTC "pacman --noconfirm --needed -S networkmanager-s6 && touch /etc/s6/adminsv/default/contents.d/NetworkManager && s6-db-reload"
						;;
					*)
						$CHROOTC "systemctl enable NetworkManager"
				esac
		esac
	else
		$CHROOTC "pacman --noconfirm --needed -S dhcpcd"
		case "$INIT" in
			"dinit")
				$CHROOTC "pacman --noconfirm --needed -S dhcpcd-dinit && ln -s /etc/dinit.d/dhcpcd /etc/dinit.d/boot.d/"
				;;
			"openrc")
				$CHROOTC "pacman --noconfirm --needed -S dhcpcd-openrc && rc-update add dhcpcd default"
				;;
			"runit")
				$CHROOTC "pacman --noconfirm --needed -S dhcpcd-runit && ln -s /etc/runit/sv/dhcpcd /etc/runit/runsvdir/default"
				;;
			"s6")
				$CHROOTC "pacman --noconfirm --needed -S dhcpcd-s6 && touch /etc/s6/adminsv/default/contents.d/dhcpcd && s6-db-reload"
				;;
			*)
				$CHROOTC "systemctl enable dhcpcd"
		esac
	fi
	clear

	# Installation of Base Fonts
	printf "Do you want to install Base Fonts Packages? [Y/n]" && read -r FONTS
	if [ "$FONTS" != "N" ] && [ "$FONTS" != "n" ]; then
		$CHROOTC "pacman --needed --noconfirm -S ttf-bitstream-vera ttf-dejavu gnu-free-fonts adobe-source-code-pro-fonts noto-fonts-cjk noto-fonts-emoji"
	fi
	clear

	# Installation of Proprietary Blobs
	printf "Do you want to install support for Proprietary Firmware? [Y/n]" && read -r BLOBS
	if [ "$BLOBS" != "N" ] && [ "$BLOBS" != "n" ]; then
		$CHROOTC "pacman --needed --noconfirm -S linux-firmware"
	fi
	clear

	# Installation of Audio System
	printf "Select an Audio Package:\n1) alsa\n2) jack\n3) pipewire\n4) pulseaudio\n-> " && read -r AUDIO
	case "$AUDIO" in
		1)
			$CHROOTC "pacman --needed -S alsa-lib alsa-oss alsa-utils alsa-plugins"
			;;
		2)
			$CHROOTC "pacman --needed -S jack"
			;;
		3)
			$CHROOTC "pacman --needed -S pipewire pipewire-pulse pipewire-alsa"
			;;
		4)
			$CHROOTC "pacman --needed -S pulseaudio pavucontrol pulseaudio-alsa alsa-utils"
	esac
	clear

	# Installation of a Graphical Environment
	printf "Select a Graphical Environment:\n1) Cinnamon\n2) Gnome\n3) Kde\n4) LXDE\n5) LXQt\n6) Mate\n7) XFCE\n8) None\n-> " && read -r ENVIRONMENT

	case "$ENVIRONMENT" in
		1)
			$CHROOTC "pacman --needed -S cinnamon"
			;;
		2)
			$CHROOTC "pacman --needed -S gnome"
			;;
		3)
			$CHROOTC "pacman --needed -S plasma-meta"
			;;
		4)
			$CHROOTC "pacman --needed -S lxde"
			;;
		5)
			$CHROOTC "pacman --needed -S lxqt"
			;;
		6)
			$CHROOTC "pacman --needed -S mate mate-extra"
			;;
		7)
			$CHROOTC "pacman --needed -S xfce4 xfce4-goodies"
	esac
	clear

	# Installation of Xorg Drivers
	if [ "$ENVIRONMENT" -ge 1 ] && [ "$ENVIRONMENT" -le 7 ]; then
		printf "Do you want to Xorg drivers? [Y/n]" && read -r XORG
		if [ "$XORG" != "N" ] && [ "$XORG" != "n" ]; then
			$CHROOTC "pacman --needed -S xorg-drivers"
		fi
		clear
	fi
	clear

	# Installation of a Display Manager
	printf "Select your desired Display Manager\n1) Gdm\n2) Lightdm\n3) Sddm\n4) None\n-> " && read -r DISPLAY && clear
	case "$DISPLAY" in
		1)
			$CHROOTC "pacman --needed -S gdm"
			clear
			case "$INIT" in
				"dinit")
					$CHROOTC "pacman --needed --noconfirm -S gdm-dinit && ln -s /etc/dinit.d/gdm /etc/dinit.d/boot.d/"
					;;
				"openrc")
					$CHROOTC "pacman --needed --noconfirm -S gdm-openrc && rc-update add gdm default"
					;;
				"runit")
					$CHROOTC "pacman --needed --noconfirm -S gdm-runit && ln -s /etc/runit/sv/gdm /etc/runit/runsvdir/default"
					;;
				"s6")
					$CHROOTC "pacman --needed --noconfirm -S gdm-s6 && touch /etc/s6/adminsv/default/contents.d/gdm && s6-db-reload"
					;;
				*)
					$CHROOTC "systemctl enable gdm"
			esac
			;;
		2)
			$CHROOTC "pacman --needed -S lightdm lightdm-gtk-greeter"
			clear
			case "$INIT" in
				"dinit")
					$CHROOTC "pacman --needed --noconfirm -S lightdm-dinit && ln -s /etc/dinit.d/lightdm /etc/dinit.d/boot.d/"
					;;
				"openrc")
					$CHROOTC "pacman --needed --noconfirm -S lightdm-openrc && rc-update add lightdm default"
					;;
				"runit")
					$CHROOTC "pacman --needed --noconfirm -S lightdm-runit && ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default"
					;;
				"s6")
					$CHROOTC "pacman --needed --noconfirm -S lightdm-s6 && touch /etc/s6/adminsv/default/contents.d/lightdm && s6-db-reload"
					;;
				*)
					$CHROOTC "systemctl enable lightdm"
			esac
			;;
		3)
			$CHROOTC "pacman --needed -S sddm"
			clear
			case "$INIT" in
				"dinit")
					$CHROOTC "pacman --needed --noconfirm -S sddm-dinit && ln -s /etc/dinit.d/sddm /etc/dinit.d/boot.d/"
					;;
				"openrc")
					$CHROOTC "pacman --needed --noconfirm -S sddm-openrc && rc-update add sddm default"
					;;
				"runit")
					$CHROOTC "pacman --needed --noconfirm -S sddm-runit && ln -s /etc/runit/sv/sddm /etc/runit/runsvdir/default"
					;;
				"s6")
					$CHROOTC "pacman --needed --noconfirm -S sddm-s6 && touch /etc/s6/adminsv/default/contents.d/sddm && s6-db-reload"
					;;
				*)
					$CHROOTC "systemctl enable sddm"
			esac
	esac
	clear

	printf "Do you want to install GRUB? [Y/n]" && read -r GRUB
	if [ "$GRUB" != "N" ] && [ "$GRUB" != "n" ]; then

		# Installing GRUB
		$CHROOTC "pacman --needed -Syu grub"
		clear

		# Installation of GRUB Bootloader
		printf "Choose the type of boot you want to use for grub\n1) BIOS\n2) EFI\n3) Auto\n-> " && read -r GRUB
		clear

		## Adding Encrypted Config to GRUB
		if [ "$ENCRYPTED" != "N" ] && [ "$ENCRYPTED" != "n" ]; then
			lsblk
			echo ""
			echo ""
			printf "Which encrypted partition should GRUB boot from? (e.g. sda1)\n-> " && read -r ENCRYPTEDPARTITION
			$CHROOTC "pacman --needed --noconfirm -Syu cryptsetup"
			sed -i s:'GRUB_CMDLINE_LINUX=""':"GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/$ENCRYPTEDPARTITION\:cryptdevice\"":g /mnt/etc/default/grub
			sed -i s:"#GRUB_ENABLE_CRYPTODISK=y":"GRUB_ENABLE_CRYPTODISK=y":g /mnt/etc/default/grub
		fi

		case "$GRUB" in
			1)
				$CHROOTC "grub-install --target=i386-pc /dev/$SDX"
				$CHROOTC "grub-mkconfig -o /boot/grub/grub.cfg"
				;;
			2)
				printf "Insert your EFI partition path\n-> " && read -r EFI && clear
					if [ "$EFI" != "N" ] && [ "$EFI" != "n" ]; then
						$CHROOTC "pacman --noconfirm --needed -S efibootmgr"
						$CHROOTC "grub-install --target=x86_46-efi --efi-directory=$EFI /dev/$SDX"
						$CHROOTC "grub-mkconfig -o /boot/grub/grub.cfg"
					fi
				;;
			*)
				$CHROOTC "grub-install /dev/$SDX"
				$CHROOTC "grub-mkconfig -o /boot/grub/grub.cfg"
		esac
		clear
	fi
fi
clear

#############################

echo
echo "##################"
echo "# Extra Packages #"
echo "##################"
echo
echo
sleep 2

# Extra Programs
printf "Do you want to install any extra packages not mentioned above? [Y/n]" && read -r MISSING
if [ "$MISSING" != "N" ] && [ "$MISSING" != "n" ]; then
	printf "Type below the extra packages you want to install separated by spaces:\n-> " && read -r PACKAGES
	$CHROOTC "pacman --needed -S $PACKAGES"
fi
clear

#############################

echo "###############################"
echo "# Updating System Services... #"
echo "###############################"
echo
echo
sleep 2

$CHROOTC "pacman -Syyuu"
clear

$CHROOTC "pacman --noconfirm -Scc"
clear

#############################

echo "###########"
echo "# DONE :) #"
echo "###########"
echo "           "
echo "Installation Complete"

printf "Do you wish to do any changes before rebooting? [Y/n]" && read -r CHANGES
if [ "$CHANGES" != "N" ] && [ "$CHANGES" != "n" ]; then
	$CHROOT
fi
clear

echo "System will reboot in a second"
reboot
